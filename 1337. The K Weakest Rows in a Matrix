    //amazing solution suing min priority queue 55%
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>q;
        for(int i=0;i<mat.size();i++){
            int j=0;
            int count=0;
            while(j<mat[i].size() && mat[i][j]==1){
                count++;
                j++;
            }
            pair<int,int>p{count,i};
            q.push(p);
        }
        vector<int> ans;
        while(k){
            ans.push_back(q.top().second);
            q.pop();
            k--;
        }
        return ans;
    }
    
    
    // another amazing method i.e append index of inside vector at end and sort it , if the elements are same it will sort on basis of index which is what we want
    //source-   https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/discuss/1201679/C%2B%2B-Python3-No-Heap-No-BS-Simple-Sort-99.20 
    
        vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        for(int i=0;i<mat.size();i++){
            mat[i].push_back(i);
        }
        sort(mat.begin(),mat.end());
        vector<int>ans;
        for(int i=0;i<k;i++){
            ans.push_back(mat[i][mat[i].size()-1]);
        }
        return ans;
    }
