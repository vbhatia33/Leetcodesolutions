  // solution i did on 2/02/2022
  ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *t1=l1,*t2=l2;
        int data=(t1->val+t2->val);
        int carry=data/10;
        ListNode *n1=new ListNode(data%10);
        ListNode *tn=n1;
        t1=t1->next;
        t2=t2->next;
        
        while(t1 and t2){
            data=(t1->val+t2->val+carry);
            ListNode *n2=new ListNode(data%10);
            carry=data/10;
            tn->next=n2;
            tn=n2;
            t1=t1->next;
            t2=t2->next;
        }
         while(t1 ){
            data=(t1->val+carry);
            ListNode *n2=new ListNode(data%10);
            carry=data/10;
            tn->next=n2;
            tn=n2;
             t1=t1->next;
        }
        while(t2 ){
            data=(t2->val+carry);
            ListNode *n2=new ListNode(data%10);
            carry=data/10;
            
            tn->next=n2;
            tn=n2;
            t2=t2->next;
        }
        if(carry){
            ListNode *nx=new ListNode(carry);
            tn->next=nx;
            tn=tn->next;
        }
        return n1;
    }
    
    //solution on 24/2/22
        ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
     ListNode prehead,*temp=&prehead; 
        int sum=0,carry=0;
        while(l1 || l2 || carry){
            sum=(l1?l1->val:0)+(l2?l2->val:0)+(carry);
            temp->next=new ListNode(sum%10);
            temp=temp->next;
            carry=sum/10;
            l1=l1?l1->next:l1;
            l2=l2?l2->next:l2;
        }
        return prehead.next;
    }
    
    
    ///10/3/22
    recursive solution 85%
        ListNode* addTwoNumbers(ListNode* l1, ListNode* l2,int carry=0) {
        if(!l1 and !l2 and !carry)   return NULL;
        int sum=(l1?l1->val:0)+(l2?l2->val:0)+carry;
        carry=sum/10;
        ListNode *head=new ListNode(sum%10);
        head->next=addTwoNumbers((l1?l1->next:NULL),(l2?l2->next:NULL),carry);
        return head;
        
    }
    
