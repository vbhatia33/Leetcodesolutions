// 50% backtracking using for loop
    void helper(vector<vector<int>>&ans,vector<int>&h,int *nums,int i,int k,int n,int sum){
        if( i>=9 || h.size()>=k){
            if(sum==n and h.size()==k)  ans.push_back(h);
            return;
        }
        
        for(int j=i;j<9;j++){
            if(sum>n) break;
            
                h.push_back(nums[j]);
                helper(ans,h,nums,j+1,k,n,sum+nums[j]);
                h.pop_back();
        }
    }
    vector<vector<int>> combinationSum3(int k, int n) {
        int nums[9]{1,2,3,4,5,6,7,8,9};
        vector<vector<int>>ans;
        vector<int>h;
        helper(ans,h,nums,0,k,n,0);
        return ans;
          
    }
};


// simple method 100%
    void helper(vector<vector<int>>&ans,vector<int>&h,int *nums,int i,int k,int n,int sum){
        
        if(i>=9){
            if(sum==n and h.size()==k)  ans.push_back(h);
            return;
        }
        h.push_back(nums[i]);
        helper(ans,h,nums,i+1,k,n,sum+nums[i]);
        h.pop_back();
        helper(ans,h,nums,i+1,k,n,sum);
        return;
    }
    vector<vector<int>> combinationSum3(int k, int n) {
        int nums[9]{1,2,3,4,5,6,7,8,9};
        vector<vector<int>>ans;
        vector<int>h;
        helper(ans,h,nums,0,k,n,0);
        return ans;  
    }
