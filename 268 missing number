    
    //simple sort and check method
    int missingNumber(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        if(nums.size()==nums[nums.size()-1] and nums[0]!=0) return 0;
        int i=0;
        for(;i<nums.size()-1;i++){
            if(nums[i+1]==nums[i]+1)    continue;
            else    return nums[i]+1;
        }
        return nums[i]+1;
    }
    
    //using bit manipulation
        int missingNumber(vector<int>& nums) {
        int result=nums.size();
        int i=0;
        for(i;i<nums.size();i++){
            result^=nums[i];
            result^=i;
        }
        return result;
    }
    
    //USING SUM METHOD
        int missingNumber(vector<int>& nums) {
        int sum=nums.size();
        for(int i=0;i<nums.size();i++){
            sum+=i;
            sum-=nums[i];
        }
        return sum;
    }
//best solution

int missingNumber(vector<int>& nums) {
    long n = nums.size();
    return n * (n+1) / 2 - accumulate(begin(nums), end(nums), 0);
}
