// using stack
    int longestValidParentheses(string s) {
        stack<int>st;
        st.push(-1);
        for(int i=0;i<s.length();i++){
            if(s[i]=='('){
                st.push(i);
            }
            else if(st.top()>=0 and !st.empty() and s[i]==')' and s[st.top()]=='('){
                st.pop();
            }
            else{
                st.push(i);
            }
        }
        int curr=s.length();
        int count=0;
        int maxcount=0;
        while(!st.empty()){
            count=curr-st.top()-1;
            maxcount=max(count,maxcount);
            curr=st.top();
            st.pop();
        }
        return maxcount;
    }
    
    
    //method 4 using two pointer
       int longestValidParentheses(string s) {
        int left=0;
        int right=0;
        int maxcount=0;
        for(int i=0;i<s.length();i++){
            if(s[i]=='(')   left++;
            else if(s[i]==')')   right++;
            
            if(left==right) maxcount=max(maxcount,right*2);
            
            if(right>left){
                left=0;
                right=0;
            }  
        }
        
        left=0;
        right=0;
        for(int i=s.length()-1;i>=0;i--){
            if(s[i]=='(')   left++;
            else if(s[i]==')')   right++;
            
            if(left==right) maxcount=max(maxcount,left*2);
            
            if(left>right){
                left=0;
                right=0;
            }  
        }
        return maxcount;
    }
