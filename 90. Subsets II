// optimised solution using recursion 69%
    void helper(vector<int>&nums,int n,vector<vector<int>>&ans,vector<int>&v,int ind){
        ans.push_back(v);
        for(int i=ind;i<n;i++){
            if(i>ind and nums[i]==nums[i-1])    continue;
            v.push_back(nums[i]);
            helper(nums,n,ans,v,i+1);
            v.pop_back();
        }
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>>ans;
        sort(nums.begin(),nums.end());
        vector<int>v;
        helper(nums,nums.size(),ans,v,0);
        return ans;
    }
