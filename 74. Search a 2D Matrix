//linear search 
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int a=0,b=0;
        int m=matrix[0].size();
        while(a<matrix.size()){
            if(matrix[a][b]==target){
                return true;
            }
            else if(matrix[a][b]>target){
                return false;
            }
            b++;
            if(b>=m){
                b=0;
                a++;
            }
        }
        return false;
    }
    
    
    //method 2- using binary search in every row 87%
        bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size();
        int n=matrix[0].size();
        int i=0;
        while(i<m){
            int s=0,e=n-1;
            while(s<=e){
                int mid=(s+e)/2;
                if(matrix[i][mid]==target)  return true;
                else if(matrix[i][mid]<target)  {
                    s=mid+1;
                }
                else
                    e=mid-1;
            }
            i++;
        }
        return false;  
    }
    
  METHOD 3
  //solution on 30 march logn soln BINARY SEARCH IN WHOLE MATRIX
      bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size();
        int n=matrix[0].size();
        int s=0,e=(m*n)-1;
        while(s<=e){
            int mid=(e-s)/2+s;
            int row=mid/n;
            int col=mid%n;
            if(matrix[row][col]==target)    return true;
            else if(matrix[row][col]>target)    e=mid-1;
            else    s=mid+1;
        }
        return false;    
    }
