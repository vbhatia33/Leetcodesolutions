//recursive solution tle
    int helper(string t1,int i,int l1,string t2,int j,int l2){
        int ans=0;
        if(i==l1 or j==l2)  return 0;
        if(t1[i]==t2[j])    ans=ans+1+helper(t1,i+1,l1,t2,j+1,l2);
        else{
            ans+=max(helper(t1,i+1,l1,t2,j,l2),helper(t1,i,l1,t2,j+1,l2));
        }
        return ans;
    }
    int longestCommonSubsequence(string text1, string text2) {
        return helper(text1,0,text1.length(),text2,0,text2.length());
    }
    
    //dp approach
        int longestCommonSubsequence(string text1, string text2) {
        int m=text1.length();
        int n=text2.length();
        int dp[m+1][n+1];
        for(int i=0;i<=m;i++){
            for(int j=0;j<=n;j++){
                if(i==0||j==0)  dp[i][j]=0;
                else if(text1[i-1]==text2[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[m][n];
    }
