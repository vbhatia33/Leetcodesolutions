    bool isSafe(vector<vector<int>>&m,int n,int x,int y,vector<vector<bool>>&visited){
        if(m[x][y]==1 and x>=0 and y>=0){
            if(visited[x][y]==0 and x<n and y<n){
                return true;
            } 
        }
        return false;
    }
    
    
    void helper(vector<vector<int>> &m,int n,vector<string>&ans,vector<vector<bool>>&visited,int x,int y,string str){
        if(m[0][0]==0)  return;
        if(x==n-1 and y==n-1){
            ans.push_back(str);
            return;
        }
        if(isSafe(m,n,x+1,y,visited))
        {
            //str.push_back('D');
            visited[x][y]=1;
            helper(m,n,ans,visited,x+1,y,str+'D');
            //str.pop_back();
            visited[x][y]=0;
        }
        
        if(isSafe(m,n,x,y-1,visited)){
            //str.push_back('L');
            visited[x][y]=1;
            helper(m,n,ans,visited,x,y-1,str+'L');
            //str.pop_back();
            visited[x][y]=0;
        }
        if(isSafe(m,n,x,y+1,visited)){
            //str.push_back('R');
            visited[x][y]=1;
            helper(m,n,ans,visited,x,y+1,str+'R');
            //str.pop_back();
            visited[x][y]=0;
        }
        if(isSafe(m,n,x-1,y,visited)){
           // str.push_back('R');
            visited[x][y]=1;
            helper(m,n,ans,visited,x-1,y,str+'U');
            //str.pop_back();
            visited[x][y]=0;
        }
        
        
    }
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<vector<bool>>visited (n,vector<bool>(n,0));
        vector<string>ans;
        string str="";
        helper(m,n,ans,visited,0,0,str);
        return ans;
    }
